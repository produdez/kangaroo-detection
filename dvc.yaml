stages:
  gen-dag:
    cmd:
      - dvc dag --full --md >> ${gen-dag.output}
      - dvc dag -o --md >> ${gen-dag.output}
    always_changed: true
    outs:
      - ${gen-dag.output}

  environment-check:
    cmd: >
      python -m src.pipeline.environment_check 
      --env_name=${environment.name}
      --output=${environment.output}
    always_changed: true
    outs:
      - ${environment.output}

  train-model:
    cmd: > # TODO: remove train_size in next update
      python -u -m src.pipeline.train_model
      --data_path="${train.data.path}"
      --train_size="${train.data.train_size}"
      --model_src="${model.src}"
      --model_config="${model.config}"
      --training_dir="${train.train_dir}"
      --summary="${train.summary}"
      --model_output="${train.model.output}"
      --metric="${train.output.metric}"
      | tee ${train.output.log}
    deps:
      # previous stage
      - ${environment.output}
      # src code
      - src/pipeline/train_model.py
      - ${model.src}
      # data/weight
      - ${train.data.path}
      - model/transfer/mask_rcnn_coco.h5
    outs:
      - ${train.output.log}
      - ${train.summary}:
          persist: true
      - ${train.model.output}:
          persist: true
    params:
      - model.config.yaml: #! DANGER: DO NOT USE implicit name in params
        - train
    metrics:
      - out/train.json
  evaluate: # TODO: remove train_size in next update
    cmd: >
      python -u -m src.pipeline.evaluate
      --data_path="${train.data.path}"
      --train_size="${train.data.train_size}"
      --model_src="${model.src}"
      --model_weight=${train.model.output}
      --model_config="${model.config}"
      --evaluate_dir="${evaluate.evaluate_dir}"
      --metric="${evaluate.output}"
    deps:
      # previous stage
      - ${environment.output}
      - ${train.model.output} #weight
      # src code
      - src/pipeline/evaluate.py
      - ${model.src}
      # data
      - ${train.data.path}
    params:
      - model.config.yaml:
        - test
    metrics:
      - ${evaluate.output}
